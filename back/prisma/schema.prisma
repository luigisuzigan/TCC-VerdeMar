generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ========================================
// üìã ENUMS - Valores fixos
// ========================================

enum PropertyCategory {
  Residencial
  Comercial
  Industrial
  Terreno
  Especial
}

enum PropertyCondition {
  Novo
  Seminovo
  Usado
  Reformado
}

// ========================================
// üë§ USER - Usu√°rios do sistema
// ========================================

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  passwordHash String
  phone        String?
  avatar       String?
  bio          String?
  role         String     @default("USER")
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  favorites    Favorite[]
  properties   Property[]
  reviews      Review[]
}

// ========================================
// üè† PROPERTY - Propriedades/Im√≥veis
// ========================================

model Property {
  id                String              @id @default(uuid())
  userId            String
  title             String
  description       String?
  category          PropertyCategory    @default(Residencial)
  type              String              @default("Apartamento")
  style             String?             // Moderno, R√∫stico, Container, Luxo, etc.
  price             Float
  currency          String              @default("BRL")
  
  // Localiza√ß√£o
  address           String         @default("")
  city              String
  state             String         @default("")
  country           String
  neighborhood      String?        // Bairro
  zipCode           String?
  latitude          Float?
  longitude         Float?
  
  // Caracter√≠sticas
  area              Int            // m¬≤
  beds              Int
  baths             Int
  suites            Int            @default(0)
  parkingSpaces     Int            @default(0)
  
  // Campos de condom√≠nio
  condoFee          Float?         // Valor do condom√≠nio
  iptu              Float?         // IPTU anual
  homeInsurance     Float?         // Seguro residencial mensal (NOVO)
  
  // Caracter√≠sticas do im√≥vel
  floor             Int?                // Andar (para apartamentos)
  totalFloors       Int?                // Total de andares do pr√©dio
  lotSize           Int?                // √Årea do terreno/lote (NOVO)
  yearBuilt         Int?                // Ano de constru√ß√£o
  propertyCondition PropertyCondition?  // Novo, Seminovo, Usado, Reformado
  
  // Arrays JSON
  amenities         String         @default("[]") @db.Text
  naturalConditions String?        @default("[]") @db.Text
  nearbyPlaces      String?        @default("{}") @db.LongText // Google Maps API data (pode ser grande)
  
  // M√≠dia
  images            String
  mainImage         String?
  
  // M√©tricas
  rating            Float?         @default(0) // Avalia√ß√£o de especialista 0-10
  viewCount         Int            @default(0)
  
  // Status
  published         Boolean        @default(false)
  
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relacionamentos
  favorites         Favorite[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PropertyView      PropertyView[]
  reviews           Review[]

  @@index([userId])
  @@index([city])
  @@index([published])
  @@index([category])
}

// ========================================
// ‚≠ê FAVORITE - Favoritos (Many-to-Many)
// ========================================

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

// ========================================
// üí¨ REVIEW - Avalia√ß√µes de usu√°rios
// ========================================

model Review {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  rating         Float
  cleanRating    Float?
  valueRating    Float?
  locationRating Float?
  comment        String?
  isPublished    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([propertyId])
  @@index([rating])
}

model ActivityLog {
  id         String   @id
  userId     String?
  action     String
  entityType String?
  entityId   String?
  metadata   String?
  ipAddress  String?
  createdAt  DateTime @default(now())

  @@index([action])
  @@index([createdAt])
  @@index([userId])
}

model ContactMessage {
  id         String    @id
  name       String
  email      String
  phone      String?
  subject    String?
  message    String
  propertyId String?
  status     String    @default("NEW")
  reply      String?
  repliedAt  DateTime?
  repliedBy  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime

  @@index([createdAt])
  @@index([propertyId])
  @@index([status])
}

model PropertyView {
  id         String   @id
  propertyId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  Property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([propertyId])
  @@index([userId])
}
