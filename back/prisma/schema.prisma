generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========================================
// üë§ USER - Usu√°rios do sistema
// ========================================
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  phone        String?
  avatar       String?
  bio          String?
  role         String   @default("USER") // USER, SELLER, ADMIN
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relacionamentos
  properties   Property[]
  favorites    Favorite[]
  reviews      Review[]
}

// ========================================
// üè† PROPERTY - Propriedades/Im√≥veis
// ========================================
model Property {
  id           String   @id @default(uuid())
  userId       String   // FK: Dono da propriedade
  title        String
  description  String?
  type         String   @default("Apartamento") // Casa, Apartamento, Chal√©, Cobertura, Terreno
  price        Float
  currency     String   @default("BRL")
  
  // Localiza√ß√£o
  address      String   @default("")
  city         String
  state        String   @default("")
  country      String
  zipCode      String?
  latitude     Float?
  longitude    Float?
  
  // Caracter√≠sticas
  area         Int      // m¬≤
  beds         Int
  baths        Int
  guests       Int
  amenities    String   @default("[]") // JSON: ["Piscina", "WiFi", "Ar-condicionado"]
  
  // Estilo e Proximidade
  style        String?  // "Moderno", "R√∫stico", "Container", "Luxo", etc.
  nearbyPlaces String?  // JSON: {schools: [...], supermarkets: [...], etc.}
  
  // Condi√ß√µes Naturais
  naturalConditions String? @default("[]") // JSON: ["Vista para o mar", "Ventila√ß√£o natural", "Sol da manh√£"]
  
  // M√≠dia
  images       String   // JSON: ["url1", "url2", "url3"]
  mainImage    String?
  
  // M√©tricas (calculadas)
  rating       Float?   @default(0)
  reviewCount  Int      @default(0)
  viewCount    Int      @default(0)
  
  // Status
  published    Boolean  @default(false)
  featured     Boolean  @default(false) // Destaque na home
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relacionamentos
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites    Favorite[]
  reviews      Review[]
  
  // √çndices para performance
  @@index([userId])
  @@index([city])
  @@index([published])
  @@index([featured])
}

// ========================================
// ‚≠ê FAVORITE - Favoritos (Tabela Pivot M:N)
// ========================================
model Favorite {
  id         String   @id @default(uuid())
  userId     String   // FK: Usu√°rio que favoritou
  propertyId String   // FK: Propriedade favoritada
  createdAt  DateTime @default(now())
  
  // Relacionamentos
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, propertyId]) // N√£o permitir favoritar 2x a mesma propriedade
  @@index([userId])
  @@index([propertyId])
}

// ========================================
// üí¨ REVIEW - Avalia√ß√µes de propriedades
// ========================================
model Review {
  id             String   @id @default(uuid())
  userId         String   // FK: Quem avaliou
  propertyId     String   // FK: Propriedade avaliada
  
  // Avalia√ß√µes (1-5 estrelas)
  rating         Float    // Nota geral
  cleanRating    Float?   // Limpeza
  valueRating    Float?   // Custo-benef√≠cio
  locationRating Float?   // Localiza√ß√£o
  
  comment        String?  // Coment√°rio opcional
  isPublished    Boolean  @default(true)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relacionamentos
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, propertyId]) // Um usu√°rio s√≥ pode avaliar cada propriedade 1x
  @@index([propertyId])
  @@index([rating])
}
