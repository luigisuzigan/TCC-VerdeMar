generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ========================================
// üìã ENUMS - Valores fixos
// ========================================

enum PropertyCategory {
  Residencial
  Comercial
  Industrial
  Terreno
  Especial
}

enum PropertyCondition {
  Novo
  Seminovo
  Usado
  Reformado
}

// ========================================
// üë§ USER - Usu√°rios do sistema
// ========================================
model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  passwordHash String
  phone        String?
  avatar       String?
  bio          String?
  role         String     @default("USER") // USER, SELLER, ADMIN
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relacionamentos
  properties   Property[]
  favorites    Favorite[]
  reviews      Review[]
}

// ========================================
// üè† PROPERTY - Propriedades/Im√≥veis
// ========================================
model Property {
  id                String              @id @default(uuid())
  userId            String              // FK: Dono da propriedade
  title             String
  description       String?
  category          PropertyCategory    @default(Residencial)
  type              String              @default("Apartamento") // Casa, Apartamento, Chal√©, Cobertura, Terreno
  style             String?             // Moderno, R√∫stico, Container, Luxo, etc.
  price             Float
  currency          String              @default("BRL")
  
  // Localiza√ß√£o
  address           String         @default("")
  city              String
  state             String         @default("")
  country           String
  neighborhood      String?        // Bairro
  zipCode           String?
  latitude          Float?
  longitude         Float?
  
  // Caracter√≠sticas
  area              Int            // m¬≤
  beds              Int
  baths             Int
  suites            Int            @default(0)
  parkingSpaces     Int            @default(0)
  
  // Campos de condom√≠nio
  condoFee          Float?         // Valor do condom√≠nio
  iptu              Float?         // IPTU anual
  homeInsurance     Float?         // Seguro residencial mensal (NOVO)
  
  // Caracter√≠sticas do im√≥vel
  floor             Int?                // Andar (para apartamentos)
  totalFloors       Int?                // Total de andares do pr√©dio
  lotSize           Int?                // √Årea do terreno/lote (NOVO)
  yearBuilt         Int?                // Ano de constru√ß√£o
  propertyCondition PropertyCondition?  // Novo, Seminovo, Usado, Reformado
  
  // Arrays JSON
  amenities         String         @default("[]") @db.Text
  naturalConditions String?        @default("[]") @db.Text
  nearbyPlaces      String?        @default("{}") @db.LongText // Google Maps API data (pode ser grande)
  
  // M√≠dia
  images            String         // JSON: ["url1", "url2", "url3"]
  mainImage         String?
  
  // M√©tricas (calculadas)
  rating            Float?         @default(0) // Avalia√ß√£o de especialista 0-10
  viewCount         Int            @default(0)
  
  // Status
  published         Boolean        @default(false)
  
  // Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relacionamentos
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites         Favorite[]
  reviews           Review[]
  views             PropertyView[]
  
  // √çndices para performance
  @@index([userId])
  @@index([city])
  @@index([published])
  @@index([category])
}

// ========================================
// ‚≠ê FAVORITE - Favoritos (Tabela Pivot M:N)
// ========================================
model Favorite {
  id         String   @id @default(uuid())
  userId     String   // FK: Usu√°rio que favoritou
  propertyId String   // FK: Propriedade favoritada
  createdAt  DateTime @default(now())
  
  // Relacionamentos
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, propertyId]) // N√£o permitir favoritar 2x a mesma propriedade
  @@index([userId])
  @@index([propertyId])
}

// ========================================
// üí¨ REVIEW - Avalia√ß√µes de propriedades
// ========================================
model Review {
  id             String   @id @default(uuid())
  userId         String   // FK: Quem avaliou
  propertyId     String   // FK: Propriedade avaliada
  
  // Avalia√ß√µes (1-5 estrelas)
  rating         Float    // Nota geral
  cleanRating    Float?   // Limpeza
  valueRating    Float?   // Custo-benef√≠cio
  locationRating Float?   // Localiza√ß√£o
  
  comment        String?  // Coment√°rio opcional
  isPublished    Boolean  @default(true)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relacionamentos
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Constraints
  @@unique([userId, propertyId]) // Um usu√°rio s√≥ pode avaliar cada propriedade 1x
  @@index([propertyId])
  @@index([rating])
}

// ========================================
// üëÅÔ∏è PROPERTY VIEW - Rastreamento de visualiza√ß√µes
// ========================================
model PropertyView {
  id         String   @id @default(uuid())
  propertyId String   // FK: Propriedade visualizada
  userId     String?  // FK: Usu√°rio que visualizou (opcional - pode ser an√¥nimo)
  ipAddress  String?  // IP para rastreamento de an√¥nimos
  userAgent  String?  // Browser/device info
  createdAt  DateTime @default(now())
  
  // Relacionamento
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId])
  @@index([userId])
  @@index([createdAt])
}

// ========================================
// üìß CONTACT MESSAGE - Mensagens de contato
// ========================================
model ContactMessage {
  id          String   @id @default(uuid())
  name        String
  email       String
  phone       String?
  subject     String?
  message     String
  propertyId  String?  // FK: Propriedade relacionada (opcional)
  
  // Status
  status      String   @default("NEW") // NEW, READ, REPLIED, ARCHIVED
  reply       String?  // Resposta do admin
  repliedAt   DateTime?
  repliedBy   String?  // ID do admin que respondeu
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([createdAt])
  @@index([propertyId])
}

// ========================================
// üìä ACTIVITY LOG - Logs de atividades importantes
// ========================================
model ActivityLog {
  id          String   @id @default(uuid())
  userId      String?  // FK: Usu√°rio que fez a a√ß√£o
  action      String   // PROPERTY_CREATED, PROPERTY_UPDATED, USER_REGISTERED, etc.
  entityType  String?  // Property, User, etc.
  entityId    String?  // ID da entidade afetada
  metadata    String?  // JSON com dados adicionais
  ipAddress   String?
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}
