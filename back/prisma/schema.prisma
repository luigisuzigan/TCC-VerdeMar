generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  passwordHash String
  phone        String?
  avatar       String?
  bio          String?
  role         String     @default("USER")
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  favorites    Favorite[]
  properties   Property[]
  reviews      Review[]
}

model Property {
  id                String         @id @default(uuid())
  userId            String
  title             String
  description       String?
  type              String         @default("Apartamento")
  price             Float
  currency          String         @default("BRL")
  address           String         @default("")
  city              String
  state             String         @default("")
  country           String
  zipCode           String?
  latitude          Float?
  longitude         Float?
  area              Int
  beds              Int
  baths             Int
  amenities         String         @default("[]")
  images            String
  mainImage         String?
  rating            Float?         @default(0)
  viewCount         Int            @default(0)
  published         Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  naturalConditions String?        @default("[]")
  nearbyPlaces      String?
  style             String?
  category          String?        @default("Venda")
  parkingSpaces     Int            @default(0)
  suites            Int            @default(0)
  featured          Boolean        @default(false)
  guests            Int            @default(4)
  reviewCount       Int            @default(0)
  favorites         Favorite[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PropertyView      PropertyView[]
  reviews           Review[]

  @@index([userId])
  @@index([city])
  @@index([published])
  @@index([featured])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

model Review {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  rating         Float
  cleanRating    Float?
  valueRating    Float?
  locationRating Float?
  comment        String?
  isPublished    Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([propertyId])
  @@index([rating])
}

model ActivityLog {
  id         String   @id
  userId     String?
  action     String
  entityType String?
  entityId   String?
  metadata   String?
  ipAddress  String?
  createdAt  DateTime @default(now())

  @@index([action])
  @@index([createdAt])
  @@index([userId])
}

model ContactMessage {
  id         String    @id
  name       String
  email      String
  phone      String?
  subject    String?
  message    String
  propertyId String?
  status     String    @default("NEW")
  reply      String?
  repliedAt  DateTime?
  repliedBy  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime

  @@index([createdAt])
  @@index([propertyId])
  @@index([status])
}

model PropertyView {
  id         String   @id
  propertyId String
  userId     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  Property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([propertyId])
  @@index([userId])
}
